# Computer Organization assignment_homework 1_input and output
#Author: Sijia Zhang

# variable declarations 
.data
x:.word 65 # begining of A
y:.word 97 # begining of a 
z:.word 48 # begining of 1

# comparing the words with ascii
number:.ascii "Zero","First","Second","Third","Fourth","Fifth","Sixth","Seventh","Eighth","Ninth"

lower:.ascii "alpha","bravo","china","delta","echo","foxtrot","golf","hotel","india","juliet","kilo",
"lima","mary","november","oscar","paper","quebec","research","sierra","tango","uniform","victor","whisky",
"x-ray","yankee","zulu"

capital:.ascii  "Alpha","Bravo","China","Delta","Echo","Foxtrot","Golf","Hotel","India","Juliet","Kilo",
"Lima","Mary","November","Oscar","Paper","Quebec","Research","Sierra","Tango","Uniform","Victor","Whisky",
"X-ray","Yankee","Zulu"

# the following is the offset
number_index:.word 0,5,11,18,24,31,37,43,51,58

word_index:.word 0,6,12,18,24,29,37,42,48,54,61,66,71,76,85,91,97,104,113,120,126,134,141,148,154,161

#instructions 
.text
main:
     li $v0 12 # save an immediate number to a general-purpose registers
     syscall 
     beq $v0, 63 exit # baranch if equal,if it is "?" then quit

# check if it is a number
lw $t4 z # load contents of RAM location into register $t4, making $t4=z
sle $t1, $t4, $v0 # comparing $t4 with $v0, if $t4 is smaller than $v0 then $t1=1
sleu $t2, $v0, 57 # set $t2 to 1 if $v0 is less or equal to 57
and $t3, $t1,$t2 #logic and 
beq $t3, 1, print_number

# check if it is a lower input
lw $t4, y
sle $t1, $t4, $v0
sleu $t2,$v0,122
and $t3,$t1,$t2
beq $t3,1,print_lower

# check if it is capital input
lw $t4, x
sle $t1, $t4, $v0
sleu $t2,$v0,90
and $t3,$t1,$t2
beq $t3, 1, print_capital
j others

# print number input
print_number:
sub $t0, $v0, 48 # substract with overflow
sll $t0, $t0, 2 # shift left logical, multiple by 4
la $t1, number_index # load computed address, not the content of the location,into register $t1
add $t1, $t1, $t0
lw $t2, ($t1)
la $t3, number
add $a0, $t2, $t3
li $v0, 4 # load appropriate system call code into register $v0
syscall 
j main

# print lower input
print_lower:
sub $t0, $v0, 97 # substract with overflow
sll $t0, $t0, 2 # shift left logical, multiple by 4
la $t1, word_index # load computed address, not the content of the location,into register $t1
add $t1, $t1, $t0
lw $t2, ($t1)
la $t3, lower
add $a0, $t2, $t3
li $v0, 4 # load appropriate system call code into register $v0
syscall 
j main

# print capital input
print_capital:
sub $t0, $v0, 65 # substract with overflow
sll $t0, $t0, 2 # shift left logical, multiple by 4
la $t1, word_index # load computed address, not the content of the location,into register $t1
add $t1, $t1, $t0
lw $t2, ($t1)
la $t3, capital
add $a0, $t2, $t3
li $v0, 4 # load appropriate system call code into register $v0
syscall 
j main

# other situation
others: li $a0, 42
        li $v0, 11
        syscall 
        j main

# exit 
exit: li $v0, 10
      syscall 
  


